name: Deploy Spring boot to Amazon EC2

on:
  push:
    branches:
      - dev
      
env:
  PROJECT_NAME: GTC-Instagram-Server
  S3_BUCKET_NAME: garit-bucket
  RESOURCE_PATH: ./src/main/resources/application-dev.yml
  CODE_DEPLOY_APPLICATION_NAME: garit-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: dev-group

jobs:
  deploy:
    name: DEPLOY
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
          
      - name: Set application-dev.yml file 
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.RESOURCE_PATH }} 
        env:
          server.port: ${{ secrets.DEV_SERVER_PORT }}
          spring.datasource.url: ${{ secrets.DEV_RDS_HOST }} 
          spring.datasource.username: ${{ secrets.DEV_RDS_USERNAME }} 
          spring.datasource.password: ${{ secrets.DEV_RDS_PASSWORD }} 
          spring.jpa.hibernate.ddl-auto: ${{ secrets.DEV_DDL_AUTO }}
          spring.redis.host: ${{ secrets.DEV_REDIS_HOST }}
          spring.redis.port: ${{ secrets.DEV_REDIS_PORT }}
          jwt.secret-key: ${{ secrets.DEV_JWT_SECRET_KEY }}
          jwt.access-token-expire-time: ${{ secrets.DEV_JWT_ACCESS_TOKEN_EXPIRE_TIME }}
          jwt.refresh-token-expire-time: ${{ secrets.DEV_JWT_REFRESH_TOKEN_EXPIRE_TIME }}
          jwt.refresh-token-reissue-time: ${{ secrets.DEV_JWT_REFRESH_TOKEN_REISSUE_TIME }}
          jwt.access-token-header-name: ${{ secrets.DEV_JWT_ACCESS_TOKEN_HEADER_NAME }}
          jwt.refresh-token-header-name: ${{ secrets.DEV_JWT_REFRESH_TOKEN_HEADER_NAME }}
          jwt.member-id-header-name: ${{ secrets.DEV_MEMBER_ID_HEADER_NAME }}
          kakao.client-id: ${{ secrets.DEV_KAKAO_CLIENT_ID }}
          kakao.redirect-uri: ${{ secrets.DEV_KAKAO_REDIRECT_URI }}
          sms.service-id: ${{ secrets.DEV_SMS_SERVICE_ID }}
          sms.access-key: ${{ secrets.DEV_SMS_ACCESS_KEY }}
          sms.secret-key: ${{ secrets.DEV_SMS_SECRET_KEY }}
          sms.sender-phone-number: ${{ secrets.DEV_SENDER_PHONE_NUMBER }}

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: Build with Gradle
        run: ./gradlew build
        shell: bash
        
      - name: Make zip file
        run: zip -qq -r ./$GITHUB_SHA.zip .
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip

      - name: Code Deploy
        run: aws deploy create-deployment --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip
